name: Deploy to Netcup

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add SSH known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p 2222 ${{ secrets.NETCUP_HOST }} >> ~/.ssh/known_hosts

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Install dependencies
        run: pnpm install

      - name: Build backend
        run: pnpm build --filter @memory-game/backend...

      - name: Verify build output
        run: test -d apps/backend/dist || (echo "Build failed - dist directory not found" && exit 1)

      - name: Deploy to Netcup
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          NETCUP_HOST: ${{ secrets.NETCUP_HOST }}
          APP_DIR: ${{ secrets.APP_DIR }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DIRECT_URL: ${{ secrets.DIRECT_URL }}
          PRISMA_ACCELERATE_URL: ${{ secrets.PRISMA_ACCELERATE_URL }}
        run: |
          # Create deployment directory structure
          mkdir -p deploy/apps/backend
          mkdir -p deploy/packages/database/app  # Add this line

          # Copy only necessary files, not node_modules
          cp docker-compose.yml deploy/
          cp -r apps/backend/dist deploy/apps/backend/
          cp -r apps/backend/package.json deploy/apps/backend/
          
          # Copy database package files (add these lines)
          cp -r packages/database/dist deploy/packages/database/
          cp -r packages/database/package.json deploy/packages/database/
          cp -r packages/database/app/prisma deploy/packages/database/app/
          
          # Copy Dockerfile and project files
          cp apps/backend/Dockerfile deploy/apps/backend/
          cp package.json turbo.json pnpm-workspace.yaml pnpm-lock.yaml deploy/
          
          # Create a .dockerignore file
          cat > deploy/apps/backend/.dockerignore << EOL
          # Dependencies
          node_modules
          npm-debug.log
          
          # Source code (since we're using the built version)
          src
          
          # Development files
          .git
          .github
          .vscode
          .idea
          .env.local
          .env.development
          
          # Test files
          __tests__
          *.test.js
          *.spec.js
          
          # Misc
          README.md
          .gitignore
          .prettierrc
          .eslintrc
          tsconfig.tsbuildinfo
          EOL

          # Create deploy script with explicit variable declarations
          # Note: Removed the single quotes around EOL
          cat > deploy.sh << EOL
          #!/bin/bash
          set -euo pipefail  # Improved error handling
          
          # Explicitly set the deployment directory
          APP_DIR="${APP_DIR}"
          DATABASE_URL="${DATABASE_URL}"
          DIRECT_URL="${DIRECT_URL}"
          PRISMA_ACCELERATE_URL="${PRISMA_ACCELERATE_URL}"
          
          echo "Deploying on remote host..."
          cd \${APP_DIR}

          # Create .env file
          cat > .env << EOF
          DATABASE_URL=\${DATABASE_URL}
          DIRECT_URL=\${DIRECT_URL}
          PRISMA_ACCELERATE_URL=\${PRISMA_ACCELERATE_URL}
          EOF
          echo "Environment variables set."

          # Stop existing containers
          docker compose down || true

          # Backup the previous deployment (just in case)
          if [ -d apps/backend ]; then
            mkdir -p backup
            mv apps/backend backup/backend-\$(date +%Y%m%d%H%M%S)
            # Keep only the last 3 backups
            ls -td backup/backend-* | tail -n +4 | xargs --no-run-if-empty rm -rf
          fi

          # Prepare directories
          mkdir -p apps
          mv deploy/apps/backend apps/backend
          
          # Move root level files
          if [ -f deploy/docker-compose.yml ]; then
            mv deploy/docker-compose.yml .
          fi
          
          if [ -f deploy/package.json ]; then
            mv deploy/package.json .
          fi
          
          if [ -f deploy/pnpm-workspace.yaml ]; then
            mv deploy/pnpm-workspace.yaml .
          fi
          
          if [ -f deploy/pnpm-lock.yaml ]; then
            mv deploy/pnpm-lock.yaml .
          fi

          if [ -f deploy/turbo.json ]; then
            mv deploy/turbo.json .
          fi

          # Build and start containers with timeout
          echo "Starting containers..."
          timeout 300 docker compose up --build -d

          # Clean up deployment files
          rm -rf deploy

          echo "âœ… Deployment complete!"
          EOL

          chmod +x deploy.sh
          
          # Debug output to verify contents before transfer
          echo "Files ready for deployment:"
          find deploy -type f | sort
          
          # Debug the deploy script
          echo "==== DEPLOY SCRIPT CONTENT ===="
          cat deploy.sh
          echo "=============================="
          
          # Deploy to remote server
          scp -P 2222 -r deploy deploy.sh ${SSH_USER}@${NETCUP_HOST}:${APP_DIR}/
          ssh -p 2222 ${SSH_USER}@${NETCUP_HOST} "cd ${APP_DIR} && bash deploy.sh"

          # Clean up local deployment files
          rm -rf deploy deploy.sh