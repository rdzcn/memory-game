name: Deploy to Netcup

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # [Other setup steps remain the same]

      - name: Deploy to Netcup
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          NETCUP_HOST: ${{ secrets.NETCUP_HOST }}
          APP_DIR: ${{ secrets.APP_DIR }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DIRECT_URL: ${{ secrets.DIRECT_URL }}
          PRISMA_ACCELERATE_URL: ${{ secrets.PRISMA_ACCELERATE_URL }}
        run: |
          # [Directory creation and file copying steps remain the same]

          # Create a setup script to run BEFORE deployment
          cat > setup.sh << EOL
          #!/bin/bash
          set -euo pipefail
          
          echo "Setting up Docker Compose..."
          
          # Create bin directory in user's home
          mkdir -p ~/bin
          
          # Download Docker Compose binary
          COMPOSE_VERSION="v2.21.0"
          if [ ! -f ~/bin/docker-compose ] || ! ~/bin/docker-compose version; then
            echo "Downloading Docker Compose..."
            curl -L "https://github.com/docker/compose/releases/download/\${COMPOSE_VERSION}/docker-compose-linux-x86_64" -o ~/bin/docker-compose
            chmod +x ~/bin/docker-compose
            echo "Docker Compose downloaded to ~/bin/docker-compose"
          else
            echo "Docker Compose already exists in ~/bin"
          fi
          
          # Add to PATH if not already there
          if ! grep -q "export PATH=\$HOME/bin:\$PATH" ~/.bashrc; then
            echo 'export PATH=$HOME/bin:$PATH' >> ~/.bashrc
          fi
          
          # Export PATH for current session
          export PATH=\$HOME/bin:\$PATH
          
          # Test if Docker is available
          if ! command -v docker &> /dev/null; then
            echo "⚠️ WARNING: Docker is not installed or not in PATH."
            echo "Please have your server administrator install Docker."
            exit 1
          fi
          
          echo "Setup complete!"
          EOL

          # Create deploy script with Docker check
          cat > deploy.sh << EOL
          #!/bin/bash
          set -euo pipefail  # Improved error handling
          
          # Explicitly set the deployment directory
          APP_DIR="${APP_DIR}"
          DATABASE_URL="${DATABASE_URL}"
          DIRECT_URL="${DIRECT_URL}"
          PRISMA_ACCELERATE_URL="${PRISMA_ACCELERATE_URL}"
          
          # Ensure local bin is in PATH
          export PATH=\$HOME/bin:\$PATH
          
          echo "Deploying on remote host..."
          cd \${APP_DIR}

          # Create .env file
          cat > .env << EOF
          DATABASE_URL=\${DATABASE_URL}
          DIRECT_URL=\${DIRECT_URL}
          PRISMA_ACCELERATE_URL=\${PRISMA_ACCELERATE_URL}
          EOF
          echo "Environment variables set."

          # Check for Docker
          if ! command -v docker &> /dev/null; then
            echo "ERROR: Docker not found! Please have your server administrator install Docker."
            exit 1
          fi

          # Check for local Docker Compose
          if [ -f ~/bin/docker-compose ] && ~/bin/docker-compose version &> /dev/null; then
            DOCKER_COMPOSE_CMD=~/bin/docker-compose
            echo "Using local Docker Compose binary"
          else
            echo "ERROR: Docker Compose not found! Please run setup.sh first."
            exit 1
          fi

          # Stop existing containers
          \${DOCKER_COMPOSE_CMD} down || true

          # Backup the previous deployment (just in case)
          if [ -d apps/backend ]; then
            mkdir -p backup
            mv apps/backend backup/backend-\$(date +%Y%m%d%H%M%S)
            # Keep only the last 3 backups
            ls -td backup/backend-* | tail -n +4 | xargs --no-run-if-empty rm -rf
          fi

          # Prepare directories
          mkdir -p apps
          mv deploy/apps/backend apps/backend
          
          # Move root level files
          if [ -f deploy/docker-compose.yml ]; then
            mv deploy/docker-compose.yml .
          fi
          
          if [ -f deploy/package.json ]; then
            mv deploy/package.json .
          fi
          
          if [ -f deploy/pnpm-workspace.yaml ]; then
            mv deploy/pnpm-workspace.yaml .
          fi
          
          if [ -f deploy/pnpm-lock.yaml ]; then
            mv deploy/pnpm-lock.yaml .
          fi

          # Build and start containers with timeout
          echo "Starting containers with \${DOCKER_COMPOSE_CMD}..."
          timeout 300 \${DOCKER_COMPOSE_CMD} up --build -d

          # Clean up deployment files
          rm -rf deploy

          echo "✅ Deployment complete!"
          EOL

          chmod +x setup.sh deploy.sh
          
          # Deploy the setup and deploy scripts
          scp -P 2222 setup.sh deploy.sh ${SSH_USER}@${NETCUP_HOST}:${APP_DIR}/
          
          # Run the setup script first
          ssh -p 2222 ${SSH_USER}@${NETCUP_HOST} "cd ${APP_DIR} && bash setup.sh"
          
          # If setup was successful, continue with deployment
          if [ $? -eq 0 ]; then
            # Deploy files
            scp -P 2222 -r deploy ${SSH_USER}@${NETCUP_HOST}:${APP_DIR}/
            
            # Run the deploy script
            ssh -p 2222 ${SSH_USER}@${NETCUP_HOST} "cd ${APP_DIR} && bash deploy.sh"
          else
            echo "Setup failed. Please have your server administrator install Docker."
            exit 1
          fi

          # Clean up local deployment files
          rm -rf deploy