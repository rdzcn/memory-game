name: Deploy to Netcup

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add SSH known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p 2222 ${{ secrets.NETCUP_HOST }} >> ~/.ssh/known_hosts

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Install dependencies
        run: pnpm install

      - name: Build backend
        run: pnpm build --filter @memory-game/backend...

      - name: Verify build output
        run: test -d apps/backend/dist || (echo "Build failed - dist directory not found" && exit 1)

      - name: Deploy to Netcup
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          NETCUP_HOST: ${{ secrets.NETCUP_HOST }}
          APP_DIR: ${{ secrets.APP_DIR }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DIRECT_URL: ${{ secrets.DIRECT_URL }}
          PRISMA_ACCELERATE_URL: ${{ secrets.PRISMA_ACCELERATE_URL }}
        run: |
          mkdir -p deploy/apps/backend
          cp docker-compose.yml deploy/
          cp apps/backend/Dockerfile deploy/
          cp -r apps/backend/* deploy/apps/backend/
          cp pnpm-lock.yaml pnpm-workspace.yaml package.json deploy/

          # Move deploy.sh script to the deploy folder before SCP
          cat > deploy.sh << 'EOL'
          #!/bin/bash
          set -euo pipefail  # Improved error handling
          echo "Deploying on remote host..."
          cd ${APP_DIR}

          cat > .env << EOF
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          DIRECT_URL=${{ secrets.DIRECT_URL }}
          PRISMA_ACCELERATE_URL=${{ secrets.PRISMA_ACCELERATE_URL }}
          EOF
          echo "Environment variables set."

          # Stop existing containers
          docker-compose down || true

          # Backup the previous deployment (just in case)
          if [ -d apps/backend ]; then
            mkdir -p backup
            mv apps/backend backup/backend-$(date +%Y%m%d%H%M%S)
            # Keep only the last 3 backups
            ls -td backup/backend-* | tail -n +4 | xargs --no-run-if-empty rm -rf
          fi

          # Prepare directories
          mkdir -p apps
          mv deploy/apps/backend apps/backend
          mv deploy/docker-compose.yml .
          mv deploy/Dockerfile .
          mv deploy/package.json .
          mv deploy/pnpm-workspace.yaml .
          mv deploy/pnpm-lock.yaml .

          # Build and start containers with timeout
          echo "Starting containers..."
          timeout 300 docker-compose up --build -d

          # Clean up deployment files
          rm -rf deploy

          echo "✅ Deployment complete!"
          EOL

          chmod +x deploy.sh
          scp -P 2222 -r deploy ${SSH_USER}@${NETCUP_HOST}:${APP_DIR}/
          ssh -p 2222 ${SSH_USER}@${NETCUP_HOST} "cd ${APP_DIR} && bash deploy.sh"

          # Clean up local deployment files
          rm -rf deploy

      - name: Verify deployment
        env:
          NETCUP_HOST: ${{ secrets.NETCUP_HOST }}
        run: |
          echo "Waiting for application to initialize..."
          ATTEMPTS=10
          DELAY=15
          for (( i=1; i<=$ATTEMPTS; i++ )); do
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://$NETCUP_HOST:4040/health || echo "failed")
            if [ "$STATUS" = "200" ]; then
              echo "✅ Deployment verified successfully!"
              exit 0
            fi
            echo "Attempt $i/$ATTEMPTS failed. Retrying in $DELAY seconds..."
            sleep $DELAY
          done

          echo "❌ Deployment failed: Health check did not return status 200 after $ATTEMPTS attempts."
          exit 1
